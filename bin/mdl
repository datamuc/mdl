#!/usr/bin/env perl

# download rtmp streams
# requires Mojolicious
# usage: mdl url1 url2 ... urlN | sh
# License: Beerware
# Mojo port of https://github.com/Sec42/Scripts/blob/master/mediathek-dl/mediathek-dl.pl

use 5.010;
use strict;
use Mojo::UserAgent;
use URI::Escape;

my $ua = Mojo::UserAgent->new;
for my $url (@ARGV) {
    given ($url) {
        when (/videos.arte.tv/) { print_arte($url) }
        when (/ardmediathek.de|mediathek.daserste.de/) { print_ard($url) }
        when (/rtl-now.rtl.de/) { print_rtl($url) }
        default { warn "dunno what to do with $url" }
    }
}

=begin comment

    function InitPlayer(h,w) {
        var flashvars = {
                data:"%2Flogic%2Fgenerate_film_xml08.php%3Fpara1%3D40921%26para2%3D0%26ivw%3Dunter_uns%2Fplayer%26tile%3D4%26tile_counter%3D365818%26h%3Da151e47b05882bd4947564db4366a5bc",
                as:'0',
                js:'1',
                dimmer:'1',
                highlights:'1',
--

        var attributes = {
           name:"videoplayer",
           id:"videoplayer"
        }
                swfobject.embedSWF("http://rtl-now.rtl.de/includes/rtlnow_videoplayer09_2.swf?ts=201107020135","videoplayer_container",w,h,"10.2.159","",flashvars,params,attributes);

=cut

sub print_rtl {
    my $url = shift;
    my $html_dom = $ua->get($url)->res->dom;
    my ($data, $swf);
    for my $s ($html_dom->find("script")->each) {
        local $_ = $s->text;
        if (/swfobject.embedSWF\("([^"]*)"/s) {
            $swf = $1;
        }
        if (/flashvars.*?=.*?{.*?data:"([^"]*)"/s) {
            $data = $1;
            $data = uri_unescape($data);
        }
    }

    if(!$data or !$swf) {
        warn "couldn't extract player or video data for $url\n";
        return;
    }

    my $xml_dom = $ua->get("http://rtl-now.rtl.de$data")->res->dom;
    my $rtmp = $xml_dom->at('data videoinfo filename')->text;

    if($rtmp !~ /^rtmp/) {
        warn "cannot find rtmp url for $url\n";
        return;
    }

    say $rtmp;
    say $data;
    say $swf;
}

sub print_ard {
    my $url = shift;
    my $html_dom = $ua->get($url)->res->dom;
    my $name = $html_dom->at('title')->all_text;
    warn "Title: $name\n";
    $name=~y!0-9a-zA-Z_!_!c;

#mediaCollection.addMediaStream(0, 2, "rtmp://x4100mp4dynonlc22033.f.o.f.lb.core-cdn.net/22033mdr/ondemand", "mp4:4100mp4dynonl/FCMS-790b9081-714f-4764-9827-a5460af146ea-c7cca1d51b4b.mp4", "default");


    my @regex = (
        qr!mediaCollection.addMediaStream\(0,\s*2,\s*"
            (rtmpt?)://([^/]*)/([^"]*)",\s*"([^"]+)"!ix,
        qr!mediaCollection.addMediaStream\(0,\s*1,\s*"
            (rtmpt?)://([^/]*)/([^"]*)",\s*"([^"]+)"!ix,
        qr!mediaCollection.addMediaStream[^"]*"
            (rtmpt?)://([^/]*)/([^"]*)/",\s*"(mp4:[^"]*.*(?:Web-L.*|hq))"!ix,
        qr!mediaCollection.addMediaStream[^"]*"
            (rtmpt?)://([^/]*)/([^"]*)/",\s*"(mp4:[^"]*.*(?:Web-M.*|mq))"!ix,
        qr!mediaCollection.addMediaStream[^"]*"
            (rtmpt?)://([^/]*)/([^"]*)/",\s*"(mp4:[^"]*.*(?:Web-S.*|lq))"!ix,
        qr!mediaCollection.addMediaStream.*"(https?)://(.*mp4)"!ix,
    );
    my ($proto,$host,$app,$path);
    OUT: for my $s ($html_dom->find('script')->each) {
        next unless $s->text;
        for(@regex) {
            if ($s->text =~ /$_/) {
                ($proto,$host,$app,$path)=($1,$2,$3,$4);
                last OUT;
            }
        }
    };

    unless($proto) {
        warn "cannot find stream url for $url";
        return;
    }

    if($proto =~ /http/) {
        print("wget -O $name.mp4 ${proto}://$host\n");
        return;
    }

    $path=~s!\.[sm]$!.l!; # Use better stream!

    $name="ARD-${name}.flv";
    print_rtmp(
        proto => $proto,
        host => $host,
        app => $app,
        path => $path,
        name => $name,
    )

}

sub print_arte {
    my $url = shift;
    my $html_dom = $ua->get($url)->res->dom;
    my $player = undef;
    my @scripts = $html_dom->find("script")->each(sub {
        $player = $1 if ($_->text =~ /url_player\s*=\s*"([^"]*)/)
    });
    if (!$player) { warn "cannot find player for $url"; return; }

    my $url1 = $html_dom->at('embed')->attrs->{src};
    $url1 =~ s/.*videorefFileUrl=//;
    $url1 =~ s/%(..)/chr hex $1/ge;

    my $xml_dom1 = $ua->get($url1)->res->dom;
    my $url2 = $xml_dom1->at('video[lang="de"]')->attrs->{ref};
    if(!$url2) { warn "cannot find second url for $url"; return; }

    my $xml_dom2 = $ua->get($url2)->res->dom;
    my $id = $xml_dom2->at("video")->attrs->{id};
    my $name = $xml_dom2->at("video name")->text;
    warn "title: $name\n";
    #my $name = $html_dom->at('h2')->all_text;
    $name=~y!0-9a-zA-Z_!_!c;
    $name="ARTE-${name}.${id}.flv";


    my $rtmp = $xml_dom2->at('url[quality="hd"]')->text;
    if (!($rtmp=~ m!(?<proto>rtmp)://(?<host>[^/]*)/(?<app>.*)/(?<path>(?i:MP4):.*)!)){
            warn "Can't match URL: $rtmp for $url\n";
            return;
    };

    my ($proto,$host,$app,$path)=($1,$2,$3,$4);

    print_rtmp(
        proto => $+{proto},
        host => $+{host},
        app => $+{app},
        path => $+{path},
        name => $name,
        player => $player,
    )
}

sub print_rtmp {
    my %o = @_;
    if($o{player}) {
        $o{player} = "-W '$o{player}' \\\n";
    }

    print << "CMD";
rtmpdump \\
--protocol '$o{proto}' \\
--host '$o{host}' \\
--app '$o{app}' \\
--playpath '$o{path}' \\
$o{player}--flv '$o{name}'

CMD
}
